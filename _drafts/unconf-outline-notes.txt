

DAVID'S SCRATCH
TODO: {NEW HIERARCHIES} Add MECE comments, decision tree
FEATURE: {COOL VIZ} Add cool hierarchical d3 vizs from around the web?
FIXME: {EXAMPLES} Make them pop on!
FEATURE: {STRATIFY} Address stratify really well.
FIXME: {COLUMNS} Use .right-column instead of tables

CONSIDER: {RANDOM} Randomly growing viz?


OUTLINE
* Introduction [8 minutes]
    * Goal
    * Ways to Illustrate Hierarchies [chart examples]
    * Defined [what makes a hierarchical dataset]
    * Hello World [show simple dataset]
* Hierarchical Example [20 minutes]
    * Develop one together [use postits]
        * Show them my PostIts [cars|owned:bmw,pilot,honda|traded:chevette|learned:odyssey(trailers are heavy),maxima(look twice before turning left)]
    * Bring it to life
        * Chart
        * JSON
        * Code:
            * RTDs (d3.hierarchy)
            * Get
            * Root
            * Parse
* Tabular Example (stratify) [20 minutes]
    * Re-arrange example
    * Show them my PostIts
        * Data Requirements (hierarchical, unique names)
    * Show d3.stratify code example
    * Show how it comes to life
        * Chart
        * JSON
        * Code:
            * RTDs (d3.stratify)
            * Get
            * Root
            * Parse
    * Code Diff?
* Extras [time permitting]
    * JSON Arrays vs. Objects
    * Charts extend naturally with new data once the foundation is layed
    * Easy Move to Links / Force

***********************


linkRadial???
https://gist.github.com/mbostock/4063550

linkHorizontal
https://gist.github.com/mbostock/4339184

***********************


IAN'S INPUT
I generally agree with the format/content youve outlined here. One initial reaction is that there isnt enough time to give people everything here, so I want to think out loud about some possibilities.

The first section "why" my be less important than we think, many people will already be motivated to get better with hierarchical data, and those who are just curious could be motivated by the hands on aspects. perhaps a quick intro with interesting visual examples could do the job?

I really like the examples you give in this section tho, what if we use those as prompts for people to create their own datasets? most people could think of a set of cities thats relevant to them, or their family tree, or a favorite book. By getting them to create their dataset they will be very familiar with it. we could maybe use postits to let them create the "nodes" and they could draw the links  on the paper they stick it to.
if they can't think of one we should have a couple simple&universal examples handy to give them.
this could also be in place of the legos, im having a hard time coming up with a concrete example using them. id still like to if you can!

with the post-its we could have them move between "tabular" and tree representations physically (moving into section 2 now)
we could also have them transcribe their postits into json. both into a tabular form as well as directly into a hierarchical form depending on how you want to introduce them to stratify/d3.hierarchy in section 3.

once they have their data it should be quick to swap between a few visuals like you suggested. however i still think it will take longer than we think.

***********************

HIERARCHICAL	                        TABULAR
Relationships are intrinsic	            Relationships formed at run-time
smaller data	                        larger data
one-to-many relationships	            many-to-many relationships
gateway to sunbursts, trees,
    treemaps, circle packs

***********************


# Read the docs ([d3-hierarchy](https://github.com/d3/d3-hierarchy "d3 hierarchy api documentation"))

***********************


# Hierarchical data = JSON Arrays + JSON Objects

## JSON Array
`[ "Listen", "Learn", "Grow" ]`
    1. an ordered list of values, seperated by commas
    2. it can store strings, numbers, booleans, objects, other arrays, or a combination
    3. surrounded by [ and ] (square brackets)
<br>&nbsp;<br>

--
## JSON Object
`{ "name": "John", "age": 30, "motto": [ "Listen", "Learn", "Grow" ] }`
    1. a list of key/value pairs
        * each pair is seperated a comma
        * keys and values are separated by a colon
    2. each key is a string; each value is a strings, numbers, booleans, objects, other arrays
    3. surrounded by { and } (curly braces)




***********************

QUOTES
Smart data structures and dumb code works a lot better<br>
than the other way around.<br>
.author[—Eric S. Raymond (The Cathedral and the Bazaar)]

--

Bad programmers worry about the code.<br>
Good programmers worry about data structures and their relationships.<br>
.author[—Linus Torvalds]


--
“Data! Data! Data!" he cried impatiently.<br>
"I can't make bricks without clay.”<br>
.author[—Sherlock Holmes]
<br>&nbsp;<br>
<br>&nbsp;<br>
--

